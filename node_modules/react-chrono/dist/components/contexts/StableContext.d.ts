import { TimelineProps, ButtonTexts } from '@models/TimelineModel';
export interface StableContextProps {
    staticDefaults: {
        borderLessCards: boolean;
        cardLess: boolean;
        disableTimelinePoint: boolean;
        disableToolbar: boolean;
        enableBreakPoint: boolean;
        enableDarkToggle: boolean;
        enableLayoutSwitch: boolean;
        enableQuickJump: boolean;
        focusActiveItemOnLoad: boolean;
        highlightCardsOnHover: boolean;
        isChild: boolean;
        lineWidth: number;
        mediaHeight: number;
        nestedCardHeight: number;
        noUniqueId: boolean;
        parseDetailsAsHTML: boolean;
        scrollable: boolean | {
            scrollbar: boolean;
        };
        showProgressOnSlideshow?: boolean;
        showOverallSlideshowProgress?: boolean;
        timelinePointDimension: number;
        timelinePointShape: 'circle' | 'square' | 'diamond';
        titleDateFormat: string;
        toolbarPosition: 'top' | 'bottom';
        uniqueId: string;
        useReadMore: boolean;
    };
    computedCardHeight: number;
    computedActiveItemIndex: number;
    computedSlideShowType: string;
    computedMediaAlign: string;
    newContentDetailsHeight: number;
    memoizedButtonTexts: ButtonTexts;
    memoizedClassNames: Record<string, string>;
    memoizedFontSizes: Record<string, string>;
    memoizedMediaSettings: Record<string, any>;
    memoizedSemanticTags: Record<string, string>;
    mode?: TimelineProps['mode'];
    cardHeight?: number;
    flipLayout?: boolean;
    items?: TimelineProps['items'];
    fontSizes?: TimelineProps['fontSizes'];
    textOverlay?: boolean;
    mediaSettings?: TimelineProps['mediaSettings'];
    responsiveBreakPoint?: number;
    enableBreakPoint?: boolean;
    slideItemDuration?: number;
    slideShowType?: string;
    cardPositionHorizontal?: TimelineProps['cardPositionHorizontal'];
    disableNavOnKey?: boolean;
    itemWidth?: number;
    lineWidth?: number;
    scrollable?: boolean | {
        scrollbar: boolean;
    };
    onScrollEnd?: () => void;
    toolbarPosition?: 'top' | 'bottom';
    disableToolbar?: boolean;
    cardWidth?: number;
    borderLessCards?: boolean;
    disableAutoScrollOnClick?: boolean;
    classNames?: Record<string, string>;
    showProgressOnSlideshow?: boolean;
    showOverallSlideshowProgress?: boolean;
    disableInteraction?: boolean;
    highlightCardsOnHover?: boolean;
    disableClickOnCircle?: boolean;
    disableTimelinePoint?: boolean;
    enableQuickJump?: boolean;
    enableLayoutSwitch?: boolean;
    cardLess?: boolean;
    useReadMore?: boolean;
}
export declare const StableContext: import("react").Context<StableContextProps>;
